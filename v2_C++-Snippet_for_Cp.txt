{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// cpp:
	"cpp": {
		"prefix": "cpp",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"#define ll long long",
			"#define pb push_back",
			"#define ppb pop_back",
			"#define pf push_front",
			"#define ppf pop_front",
			"#define all(x) (x).begin(), (x).end()",
			"#define uniq(v) (v).erase(unique(all(v)), (v).end())",
			"#define sz(x) (ll)((x).size())",
			"#define fr first",
			"#define sc second",
			"#define pii pair<ll, ll>",
			"#define rep(i, a, b) for (ll i = a; i < b; i++)",
			"#define mem1(a) memset(a,-1, sizeof(a))",
			"#define mem0(a) memset(a,0, sizeof(a))",
			"#define ppcll __builtin_popcountll",
			"#define ppc __builtin_popcount",
			"template <typename T1, typename T2>",
			"istream &operator>>(istream &in, pair<T1, T2> &a)",
			"{",
			"    in >> a.fr >> a.sc;",
			"    return in;",
			"}",
			"template <typename T1, typename T2>",
			"ostream &operator<<(ostream &out, pair<T1, T2> a)",
			"{",
			"out << a.fr << \" \" << a.sc;",
			"return out;",
			"}",
			"template <typename T, typename T1>",
			"T amax(T &a, T1 b)",
			"{",
			"if (b > a)",
			" a = b;",
			"return a;",
			"}",
			"template <typename T, typename T1>",
			"T amin(T &a, T1 b)",
			"{",
			"if (b < a)",
			" a = b;",
			"return a;",
			"}",
			"const long long INF = 1e18;",
			"const int32_t M = 1e9 + 7;",
			"const int32_t MM = 998244353;",
			"const ll N = 0;",
			"void solve(ll test)",
			"{",
			"$1",
			"}",
			"signed main()",
			"{",
			"ios_base::sync_with_stdio(false);",
			"cin.tie(0);",
			"cout.tie(0);",
			"//freopen(\"input.txt\", \"r\", stdin);",
			"//freopen(\"output.txt\", \"w\", stdout);",
			"#ifdef SIEVE",
			"sieve();",
			"#endif",
			"#ifdef NCR",
			"init();",
			"#endif",
			"ll t = 1;",
			"$2cin >> t;",
			"rep(i,1, t + 1) solve(i);",
			"return 0;",
			"}",
		],
		"description": "Log output to console"
	}
}
